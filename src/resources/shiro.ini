# INI configuration is very powerful and flexible, while still remaining succinct.
# Please http://shiro.apache.org/configuration.html and
# http://shiro.apache.org/web.html for more.

[main]
# Any realms here will automatically be added to the default created securityManager.  No need to define
# a securityManager here unless you want to override the default. If you want to override the default, you would
# do it by uncommenting this line and specifying the fully qualified class name of your SecurityManager implementation:
# securityManager = my.domain.package.MySecurityManager

# define the realm(s) we want to use for our application.  If you have more than one realm, the order in which they
# are defined is the order in which they will be consulted during the authentication process.
# This simple example uses only a single realm, but you could add more for more complicated requirements.

#authc = org.apache.shiro.web.filter.authc.PassThruAuthenticationFilter

authc = org.apache.shiro.web.filter.authc.FormAuthenticationFilter

#shiro.loginUrl = /login

# specify login page
authc.loginUrl = /login

# redirect after successful login
authc.successUrl  = /stateful

#authc.failureKeyAttribute = shiroLoginFailure

[filters]
roles.unauthorizedUrl = /login

perms.unauthorizedUrl = /login

[users]
# format: username = password, role1, role2, ..., roleN
admin = admin, ROLE_ADMIN

guest = guest,guest

presidentskroob = 12345,president

darkhelmet = ludicrousspeed,darklord,schwartz
 
lonestarr = vespa,goodguy,schwartz

[roles]
# format: roleName = permission1, permission2, ..., permissionN
ROLE_ADMIN = *
schwartz = lightsaber:*
goodguy = winnebago:drive:eagle5

[urls]
# The /login is not restricted to authenticated users (otherwise no one could log in!), but
# the 'authc' filter must still be specified for it so it can process that url's
# login submissions. It is 'smart' enough to allow those requests through as specified by the
# shiro.loginUrl above.

/login = authc

#/logout = logout

/functional = authc
