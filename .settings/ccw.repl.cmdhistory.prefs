cmdhistory=[";; Loading file /home/outcastgeek/workspace/oasys_corp/src/com/outcastgeek/services/web/Services.clj" ";; Switching to com.outcastgeek.services.web.Services namespace" "(clojure.core/in-ns 'com.outcastgeek.services.web.Services)" ";; Loading file /home/outcastgeek/workspace/oasys_corp/src/com/outcastgeek/services/web/Services.clj" ";; Switching to com.outcastgeek.services.web.Services namespace" "(clojure.core/in-ns 'com.outcastgeek.services.web.Services)" "(use 'com.outcastgeek.config.AppConfig)" "appProperties" "(pprint appProperties)" "(-main \\"Netty\\" \\"9998\\" \\"web.xml\\")" ";; Loading file /home/outcastgeek/workspace/oasys_corp/src/com/outcastgeek/services/web/Services.clj" ";; Switching to com.outcastgeek.services.web.Services namespace" "(clojure.core/in-ns 'com.outcastgeek.services.web.Services)" "(-main \\"Netty\\" \\"9998\\" \\"web.xml\\")" ";; Loading file /home/outcastgeek/workspace/oasys_corp/src/com/outcastgeek/util/Jobs.clj" "(-main \\"Netty\\" \\"9998\\" \\"web.xml\\")" ";; Loading file /home/outcastgeek/workspace/oasys_corp/src/com/outcastgeek/services/web/Services.clj" ";; Switching to com.outcastgeek.services.web.Services namespace" "(clojure.core/in-ns 'com.outcastgeek.services.web.Services)" "(-main \\"Netty\\" \\"9998\\" \\"web.xml\\")" "(pprint appProperties)" "(-main \\"Netty\\" \\"9998\\" \\"web.xml\\")" ";; Loading file /home/outcastgeek/workspace/oasys_corp/src/com/outcastgeek/services/web/Services.clj" ";; Switching to com.outcastgeek.services.web.Services namespace" "(clojure.core/in-ns 'com.outcastgeek.services.web.Services)" "(-main \\"Netty\\" \\"9998\\" \\"web.xml\\")" ";; Loading file /home/outcastgeek/workspace/oasys_corp/src/com/outcastgeek/services/web/Services.clj" "(-main \\"Netty\\" \\"9998\\" \\"web.xml\\")" "(ccw.debug.serverrepl/with-exception-serialization (clojure.core/binding [clojure.core/*compile-path* \\"classes\\"] (clojure.core/compile 'com.outcastgeek.services.web.Services)))" "(-main \\"Netty\\" \\"9998\\" \\"web.xml\\")" ";; Loading file /home/outcastgeek/workspace/oasys_corp/src/com/outcastgeek/services/web/Services.clj" ";; Switching to com.outcastgeek.services.web.Services namespace" "(clojure.core/in-ns 'com.outcastgeek.services.web.Services)" ";; Loading file /home/outcastgeek/workspace/oasys_corp/src/com/outcastgeek/services/web/Services.clj" ";; Switching to com.outcastgeek.services.web.Services namespace" "(clojure.core/in-ns 'com.outcastgeek.services.web.Services)" "(-main \\"Netty\\" \\"9998\\" \\"web.xml\\")" ";; Loading file /home/outcastgeek/workspace/oasys_corp/src/com/outcastgeek/services/web/Services.clj" ";; Switching to com.outcastgeek.services.web.Services namespace" "(clojure.core/in-ns 'com.outcastgeek.services.web.Services)" "(-main \\"Netty\\" \\"9998\\" \\"web.xml\\")" ";; Loading file /home/outcastgeek/workspace/oasys_corp/project.clj" ";; Loading file /home/outcastgeek/workspace/oasys_corp/src/com/outcastgeek/services/web/Services.clj" "(require '[clojure.org.reducers \:as r])" "(require '[clojure.core.reducers \:as r])" "(def v (into [] (range 10000000)))" "(r/fold + (r/mapcat range v))" "(def v (into [] (range 100000)))" "(r/fold + (r/mapcat range v))" "(r/fold + (r/mapcat range (range 10000000)))" ";; Loading file /home/outcastgeek/workspace/oasys_corp/src/com/outcastgeek/util/Jobs.clj" ";; Switching to com.outcastgeek.util.Jobs namespace" "(clojure.core/in-ns 'com.outcastgeek.util.Jobs)" ";; Loading file /home/outcastgeek/workspace/oasys_corp/src/com/outcastgeek/util/Jobs.clj" "(ccw.debug.serverrepl/with-exception-serialization (clojure.core/binding [clojure.core/*compile-path* \\"classes\\"] (clojure.core/compile 'com.outcastgeek.util.Jobs)))" "(fetch sessionName\\n               \:where {\:_date {\:$lt (now)}}\\n               \:limit 40)" ";; Loading file /home/outcastgeek/workspace/oasys_corp/src/com/outcastgeek/util/Jobs.clj" "(now)" "(fetch sessionName\\n               \:where {\:_date {\:$lt (now)}}\\n               \:limit 40)" "(use 'somnium.congomongo)" "(fetch sessionName\\n               \:where {\:_date {\:$lt (now)}}\\n               \:limit 40)" "(use 'com.outcastgeek.config.AppConfig)" "(set-connection\! mongo-connection)" "(use 'com.outcastgeek.util.Jobs)" ";; Loading file /home/outcastgeek/workspace/oasys_corp/src/com/outcastgeek/util/Jobs.clj" ";; Switching to com.outcastgeek.util.Jobs namespace" "(clojure.core/in-ns 'com.outcastgeek.util.Jobs)" "(def sess1 (fetch sessionsCollection\\n                        \:limit 44))" "(pprint sess1)" "(defn expired? [date]\\n                   (< sessionDuration\\n                      (- (.getTime (Date.)) (.getTime date))))" "(defn destroSess [sess]\\n                                 (let [sessionId (sess \:_id)]\\n                                   (debug \\"<<<< Destroying expired user session with Id\: \\" sessionId \\" >>>>\\")\\n                                   (destroy\! sessionsCollection\\n                                             {\:_id sessionId}))\\n                                 )" "(def expSess1 (into () (r/filter \#(expired? (% \:session_timestamp))\\n                                                      (r/map\\n                                                        \#(select-keys % [\:session_timestamp \:_id]) sessions))))" "(def expSess1 (into () (r/filter \#(expired? (% \:session_timestamp))\\n                                                      (r/map\\n                                                        \#(select-keys % [\:session_timestamp \:_id]) sess1))))" "(pprint expSess1)" "(r/map pprint expSess1)" "(map pprint expSess1)" "(reduce pprint expSess1)" "(r/fold pprint expSess1)" "(reduce (r/fold pprint expSess1))" "(reduce pprint expSess1)" "(reduce pprint (r/filter \#(expired? (% \:session_timestamp))\\n                                                      (r/map\\n                                                        \#(select-keys % [\:session_timestamp \:_id]) sess1)))" "(reduce pprint (into () (r/filter \#(expired? (% \:session_timestamp))\\n                                                      (r/map\\n                                                        \#(select-keys % [\:session_timestamp \:_id]) sess1))))" "(r/mapcat pprint (r/filter \#(expired? (% \:session_timestamp))\\n                                                      (r/map\\n                                                        \#(select-keys % [\:session_timestamp \:_id]) sess1)))" "(r/map pprint (r/filter \#(expired? (% \:session_timestamp))\\n                                                      (r/map\\n                                                        \#(select-keys % [\:session_timestamp \:_id]) sess1)))" "(r/reduce pprint (r/filter \#(expired? (% \:session_timestamp))\\n                                                      (r/map\\n                                                        \#(select-keys % [\:session_timestamp \:_id]) sess1)))" "(reduce pprint (r/filter \#(expired? (% \:session_timestamp))\\n                                                      (r/map\\n                                                        \#(select-keys % [\:session_timestamp \:_id]) sess1)))" "(r/reduce pprint (into () (r/filter \#(expired? (% \:session_timestamp))\\n                                                      (r/map\\n                                                        \#(select-keys % [\:session_timestamp \:_id]) sess1))))" "(reduce pprint (into ()(r/filter \#(expired? (% \:session_timestamp))\\n                                                      (r/map\\n                                                        \#(select-keys % [\:session_timestamp \:_id]) sess1))))" ";; Switching to com.outcastgeek.config.AppConfig namespace" "(+ 1 1)" "mailQueue" "payrollCreator" "(use 'com.outcastgeek.config.AppConfig)" "(pp appProperties)" "(pprint appProperties)" "mongo-connection" "(pprint mongo-connection)" "(pprint (mongo-connection \:db))" "(use 'com.outcastgeek.services.web.Services)" "(defn rightNow (time/now))" "(require '[clj-time.core \:as time])" "(defn rightNow (time/now))" "time/now" "(defn rightNow\\n  (time/now))" "(def rightNow (time/now))" "(use 'com.outcastgeek.domain.Entities)" "(def employees\\n  (findExistingEmployee {\:username \\"akpepson\\"}))" "(def employee\\n     (findExistingEmployee {\:username \\"akpepson\\"}))" "(pprint employee)" "(use 'com.outcastgeek.config.AppConfig)" "(use 'clj-time.coerce)" "(def currentTimeSheet (findExistingTimesheet {\:employee_id (employee \:id)\\n                                                 \:start_date (to-sql-date (firstDayOfTheWeekOf rightNow))\\n                                                 \:end_date (to-sql-date (lastDayOfTheWeekOf rightNow))}))" "(def currentTimeSheet\\n  (findExistingTimesheet {\:employee_id (employee \:id)\\n                          \:start_date (to-sql-date (firstDayOfTheWeekOf rightNow))\\n                          \:end_date (to-sql-date (lastDayOfTheWeekOf rightNow))}))" "(employee \:id)" "(pprint employee)" "(\:id employee)" "(employee \:id)" "(get employee \:id)" "(get employee \\"id\\")" "(pprint (get employee \\"id\\"))" "(pprint (get employee \:id))" "(def employee\\n  (first (findExistingEmployee {\:username \\"akpepson\\"})))" "(pprint employee)" "(employee \:id)" "(def currentTimeSheet (findExistingTimesheet {\:employee_id (employee \:id)\\n                                                 \:start_date (to-sql-date (firstDayOfTheWeekOf rightNow))\\n                                                 \:end_date (to-sql-date (lastDayOfTheWeekOf rightNow))}))" "(pprint currentTimeSheet)" "(def currentTimeSheet (findExistingTimesheet {\:employee_id (employee \:id)\\n                                                    \:start_date (to-sql-date (firstDayOfTheWeekOf rightNow))\\n                                                    \:end_date (to-sql-date (lastDayOfTheWeekOf rightNow))}))" "(pprint currentTimeSheet)" "(use 'com.outcastgeek.domain.Entities)" "(use 'com.outcastgeek.services.web.Services)" "(use 'clj-time.coerce)" "(use '[clj-time.core \:as time])" "(use '[clj-time.core \:as t])" "(def rightNow (t/now))" "(use 'com.outcastgeek.domain.Entities)" "(def employee\\n        (first (findExistingEmployee {\:username \\"akpepson\\"})))" "(use 'com.outcastgeek.config.AppConfig)" "(def currentTimeSheet (findEmployeeCurrentTimesheet {\:employee_id (employee \:id)\\n                                                    \:start_date (to-sql-date (firstDayOfTheWeekOf rightNow))\\n                                                    \:end_date (to-sql-date (lastDayOfTheWeekOf rightNow))}))" "(pprint currentTimeSheet)" "(pprint (first currentTimeSheet))" "(def currentTimeSheet (first (findEmployeeCurrentTimesheet {\:employee_id (employee \:id)\\n                                                       \:start_date (to-sql-date (firstDayOfTheWeekOf rightNow))\\n                                                       \:end_date (to-sql-date (lastDayOfTheWeekOf rightNow))})))" "(pprint currentTimeSheet)" "(def workSegments (findWorksegment {\:employee_id (employee \:id)\\n                                       \:timesheet_id (currentTimeSheet \:id)}))" "(pprint workSegments)" ";; Switching to com.outcastgeek.services.web.Services namespace" "-main" "(get-current-timestamp)" "sessionsCollection" "mailQueue" "queueServer" "(pprint queueServer)" "queueServerConnectionFactory" "(pprint queueServerConnectionFactory)" "jmsConnection" "(pprint jmsConnection)" "(. queueServer start)" "(msg/listen \\"/queue/work\\"\\n            \#(pprint %)\\n            \:host (appProperties \:queue-server-conf-url)\\n            \:port (appProperties \:queue-server-port))" "(msg/listen \\"/queue/work\\"\\r\\n            \#(pprint %)\\r\\n            \:host \\"localhost\\"\\r\\n            \:port (appProperties \:queue-server-port))" "appProperties" "(pprint appProperties)" "(goog-analytics)" "(pprint (goog-analytics))" "(popoverLeft \\"Title\\" \\"Some Random Message\\")" "(html (popoverLeft \\"Title\\" \\"Some Random Message\\"))" "(pprint (html (popoverLeft \\"Title\\" \\"Some Random Message\\")))" "(+ 1 1)" "(appProperties \:queue-server-host)" "(. queueServer start)" "(msg/listen \\"/queue/work\\"\\r\\n               \#(pprint %)\\r\\n               \:host (appProperties \:queue-server-host)\\r\\n               \:port (appProperties \:queue-server-port))" "(msg/listen \\"/queue/work\\"\\r\\n                  \#(pprint %)\\n                  \:username \\"guest\\"\\r\\n                  \:host (appProperties \:queue-server-host)\\r\\n                  \:port (appProperties \:queue-server-port))" "(msg/listen \\"/queue/work\\"\\r\\n                     \#(pprint %)\\r\\n                     \:username \\"guest\\"\\r\\n                     \:host (appProperties \:queue-server-host)\\r\\n                     \:port (appProperties \:queue-server-port))" "(. queueServer start)" "(msg/listen \\"/queue/work\\"\\r\\n                     \#(pprint %)\\r\\n                     \:username \\"guest\\"\\r\\n                     \:host (appProperties \:queue-server-host)\\r\\n                     \:port (appProperties \:queue-server-port))" "(. queueServer start)" "(msg/listen \\"/queue/work\\"\\r\\n                     \#(pprint %)\\r\\n                     \:username \\"guest\\"\\r\\n                     \:host (appProperties \:queue-server-host)\\r\\n                     \:port (appProperties \:queue-server-port))" "(. queueServer start)" "(msg/listen \\"/queue/work\\"\\r\\n                     \#(pprint %)\\r\\n                     \:username \\"guest\\"\\r\\n                     \:password \\"guest\\"\\r\\n                     \:host (appProperties \:queue-server-host)\\r\\n                     \:port (appProperties \:queue-server-port))" "(msg/listen \\"/queue/work\\"\\r\\n                     \#(pprint %)\\r\\n                     \:host (appProperties \:queue-server-host)\\r\\n                     \:port (appProperties \:queue-server-port))" "(. queueServer start)" "(msg/list \\"/service/print\\"\\n          \#(pprint %)\\n          \:host (appProperties \:queue-server-host)\\n          \:port (appProperties \:queue-server-port)\\n          \:username \\"guest\\"\\n          \:password \\"guest\\")" "(msg/listen \\"/service/print\\"\\r\\n             \#(pprint %)\\r\\n             \:host (appProperties \:queue-server-host)\\r\\n             \:port (appProperties \:queue-server-port)\\r\\n             \:username \\"guest\\"\\r\\n             \:password \\"guest\\")" "(msg/listen \\"/queue/print\\"\\r\\n                \#(pprint %)\\r\\n                \:host (appProperties \:queue-server-host)\\r\\n                \:port (appProperties \:queue-server-port)\\r\\n                \:username \\"guest\\"\\r\\n                \:password \\"guest\\")" "(msg/start \\"/service/print\\"\\r\\n                \#(pprint %)\\r\\n                \:host (appProperties \:queue-server-host)\\r\\n                \:port (appProperties \:queue-server-port)\\r\\n                \:username \\"guest\\"\\r\\n                \:password \\"guest\\")" "(msg/listen \\"/queue/print\\"\\r\\n                \:host (appProperties \:queue-server-host)\\r\\n                \:port (appProperties \:queue-server-port)\\r\\n                \:username \\"guest\\"\\r\\n                \:password \\"guest\\")" "(msg/start \\"/queue/print\\"\\r\\n                \:host (appProperties \:queue-server-host)\\r\\n                \:port (appProperties \:queue-server-port))" "(msg/start \\"/queue/print\\"\\r\\n                \:host (appProperties \:queue-server-host)\\r\\n                \:port (appProperties \:queue-server-port)\\r\\n                \:username \\"guest\\"\\r\\n                \:password \\"guest\\")" "jmsConnection" "(require '[immutant.messaging.core \:as cmsg])" "(cmsg/start-queue \\"/queue/print\\")" "(. queueServer start)" "(msg/start \\"/queue/print\\")" "(msg/start \\"/queue/print\\"\\n           \:username \\"guest\\"\\n           \:password \\"guest\\")" "(msg/listen \\"/queue/print\\"\\n            \#(pprint %)\\n            (appProperties \:queue-server-host)\\n            (appProperties \:queue-server-port)\\n            \:username \\"guest\\"\\n            \:password \\"guest\\")" "(. queueServer start)" "(msg/listen \\"/queue/print\\"\\n               \#(pprint %)\\n               (appProperties \:queue-server-host)\\n               (appProperties \:queue-server-port)\\n               \:username \\"guest\\"\\n               \:password \\"guest\\")" "(. queueServer start)" "(msg/listen \\"/queue/print\\"\\n               \#(pprint %)\\n               (appProperties \:queue-server-host)\\n               (appProperties \:queue-server-port)\\n               \:username \\"guest\\"\\n               \:password \\"guest\\")" "(. queueServer start)" "(msg/listen \\"/queue/print\\"\\n               \#(pprint %)\\n               (appProperties \:queue-server-host)\\n               (appProperties \:queue-server-port)\\n               \:username \\"guest\\"\\n               \:password \\"guest\\")" "(. queueServer start)" "(msg/listen \\"/queue/print\\"\\n               \#(pprint %)\\n               (appProperties \:queue-server-host)\\n               (appProperties \:queue-server-port)\\n               \:username \\"guest\\"\\n               \:password \\"guest\\")" "(. queueServer start)" "(msg/listen \\"/queue/print\\"\\n               \#(pprint %)\\n               (appProperties \:queue-server-host)\\n               (appProperties \:queue-server-port)\\n               \:username \\"guest\\"\\n               \:password \\"guest\\")" "(. queueServer start)" "(msg/listen \\"/queue/print\\"\\n               \#(pprint %)\\n               (appProperties \:queue-server-host)\\n               (appProperties \:queue-server-port)\\n               \:username \\"guest\\"\\n               \:password \\"guest\\")" "(. queueServer start)" "(. jmsServerManager start)" "(pprint jmsServerManager)" "(msg/listen \\"/queue/ExampleQueue\\"\\n               \#(pprint %)\\n               (appProperties \:queue-server-host)\\n               (appProperties \:queue-server-port)\\n               \:username \\"guest\\"\\n               \:password \\"guest\\")" "jmsConnection" "(use 'clamq.protocol.connection)" "(require '[clamq.protocol.connection \:as qcon])" "(def consumer\\n  (qcon/consumer jmsConnection\\n                 {\:endpoint \\"/queue/ExampleQueue\\"\\n                  \:on-message \#(pprint %)\\n                  \:transacted false}))" "(def qConsumer\\n     (qcon/consumer jmsConnection\\n                    {\:endpoint \\"/queue/ExampleQueue\\"\\n                     \:on-message \#(pprint %)\\n                     \:transacted false}))" "(pprint qConsumer)" "(use '[clamq.protocol.consumer \:as cons])" "(cons/start qConsumer)" "(require '[clamq.protocol.consumer \:as cons])" "(cons/start qConsumer)" "(require '[clamq.protocol.producer \:as prod])" "(def qProducer\\n  (qcon/producer jmsConnection))" "(prod/publish qProducer\\n              \\"/queue/ExampleQueue\\"\\n              \\"Lambert\\")" "(. queueServer start)" "(. jmsServerManager start)" "(qConsumer\\n    \\"/queue/ExampleQueue\\" \#(pprint %))" "(qPublish\\n  \\"/queue/ExampleQueue\\" \\"Lambert\\")" "(clamq.protocol.producer/publish \\"/queue/ExampleQueue\\" \\"Lambert\\")" "jmsConnection/producer" "jmsConnection" "(require '[clojure.reflect \:as r])" "(print-table (\:members (r/reflect \\"foo\\")))" "(print-table (\:members (r/reflect qProducer)))" "(require '[clojure.contrib.repl-utils \:as ru])" "(ru/show DateTime)" "(ru/show qProducer)" "(. queueServer start)" "(. jmsServerManager start)" "(qConsumer\\n    \\"/queue/ExampleQueue\\" \#(pprint %))" "(qPublish\\n  \\"/queue/ExampleQueue\\" \\"Lambert\\")" "actorSystem" "(use 'okku.core)" "(def echoecho\\n  (look-up \\"akka\://OutcastgeekActorSystem@127.0.0.1\:2552/user/echo\\"\\n           \:in actorSystem))" "echoecho" "(.tell echoecho \\"Lambert\\")" "(.tell echoecho \\"Rigobert\\")" "(def mailmail\\n     (look-up \\"akka\://OutcastgeekActorSystem@127.0.0.1\:2552/user/sendWelcomeEmail\\"\\n              \:in actorSystem))" "mailmail" "(.tell mailmail {\:username \\"Lambert\\"\\n                 \:email \\"outcastgeek@gmail.com\\"})" "(def gggg\\n     (look-up \\"akka\://OutcastgeekActorSystem@127.0.0.1\:2552/user/sadggsagag\\"\\n              \:in actorSystem))" "gggg" "(def mailmail\\n     (look-up \\"akka\://OutcastgeekActorSystem@127.0.0.1\:2552/sendWelcomeEmail\\"\\n              \:in actorSystem))" "mailmail" "(defn polynomial\\r\\n        \\"computes the value of a polynomial\\r\\n         with the given coefficients for a given value x\\"\\r\\n        [coefs x]\\r\\n        (reduce \#(+ (* x %1) %2) coefs))" "(polynomial [2 1 3] 2)" "((fn [a b]\\r\\n  (+ (* x a) b)) [2 1 3] 2)" "(let [fn (fn [a b] (+ (* x a) b))]\\n  (fn [2 1 3] 2))" "(defn poly [a b] (+ (* x a) b))"]
eclipse.preferences.version=1
