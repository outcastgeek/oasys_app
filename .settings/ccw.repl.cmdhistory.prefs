cmdhistory=[";; Loading file /home/outcastgeek/workspace/oasys_corp/src/com/outcastgeek/services/web/Services.clj" ";; Switching to com.outcastgeek.services.web.Services namespace" "(clojure.core/in-ns 'com.outcastgeek.services.web.Services)" ";; Loading file /home/outcastgeek/workspace/oasys_corp/src/com/outcastgeek/services/web/Services.clj" ";; Switching to com.outcastgeek.services.web.Services namespace" "(clojure.core/in-ns 'com.outcastgeek.services.web.Services)" "(use 'com.outcastgeek.config.AppConfig)" "appProperties" "(pprint appProperties)" "(-main \\"Netty\\" \\"9998\\" \\"web.xml\\")" ";; Loading file /home/outcastgeek/workspace/oasys_corp/src/com/outcastgeek/services/web/Services.clj" ";; Switching to com.outcastgeek.services.web.Services namespace" "(clojure.core/in-ns 'com.outcastgeek.services.web.Services)" "(-main \\"Netty\\" \\"9998\\" \\"web.xml\\")" ";; Loading file /home/outcastgeek/workspace/oasys_corp/src/com/outcastgeek/util/Jobs.clj" "(-main \\"Netty\\" \\"9998\\" \\"web.xml\\")" ";; Loading file /home/outcastgeek/workspace/oasys_corp/src/com/outcastgeek/services/web/Services.clj" ";; Switching to com.outcastgeek.services.web.Services namespace" "(clojure.core/in-ns 'com.outcastgeek.services.web.Services)" "(-main \\"Netty\\" \\"9998\\" \\"web.xml\\")" "(pprint appProperties)" "(-main \\"Netty\\" \\"9998\\" \\"web.xml\\")" ";; Loading file /home/outcastgeek/workspace/oasys_corp/src/com/outcastgeek/services/web/Services.clj" ";; Switching to com.outcastgeek.services.web.Services namespace" "(clojure.core/in-ns 'com.outcastgeek.services.web.Services)" "(-main \\"Netty\\" \\"9998\\" \\"web.xml\\")" ";; Loading file /home/outcastgeek/workspace/oasys_corp/src/com/outcastgeek/services/web/Services.clj" "(-main \\"Netty\\" \\"9998\\" \\"web.xml\\")" "(ccw.debug.serverrepl/with-exception-serialization (clojure.core/binding [clojure.core/*compile-path* \\"classes\\"] (clojure.core/compile 'com.outcastgeek.services.web.Services)))" "(-main \\"Netty\\" \\"9998\\" \\"web.xml\\")" ";; Loading file /home/outcastgeek/workspace/oasys_corp/src/com/outcastgeek/services/web/Services.clj" ";; Switching to com.outcastgeek.services.web.Services namespace" "(clojure.core/in-ns 'com.outcastgeek.services.web.Services)" ";; Loading file /home/outcastgeek/workspace/oasys_corp/src/com/outcastgeek/services/web/Services.clj" ";; Switching to com.outcastgeek.services.web.Services namespace" "(clojure.core/in-ns 'com.outcastgeek.services.web.Services)" "(-main \\"Netty\\" \\"9998\\" \\"web.xml\\")" ";; Loading file /home/outcastgeek/workspace/oasys_corp/src/com/outcastgeek/services/web/Services.clj" ";; Switching to com.outcastgeek.services.web.Services namespace" "(clojure.core/in-ns 'com.outcastgeek.services.web.Services)" "(-main \\"Netty\\" \\"9998\\" \\"web.xml\\")" ";; Loading file /home/outcastgeek/workspace/oasys_corp/project.clj" ";; Loading file /home/outcastgeek/workspace/oasys_corp/src/com/outcastgeek/services/web/Services.clj" "(require '[clojure.org.reducers \:as r])" "(require '[clojure.core.reducers \:as r])" "(def v (into [] (range 10000000)))" "(r/fold + (r/mapcat range v))" "(def v (into [] (range 100000)))" "(r/fold + (r/mapcat range v))" "(r/fold + (r/mapcat range (range 10000000)))" ";; Loading file /home/outcastgeek/workspace/oasys_corp/src/com/outcastgeek/util/Jobs.clj" ";; Switching to com.outcastgeek.util.Jobs namespace" "(clojure.core/in-ns 'com.outcastgeek.util.Jobs)" ";; Loading file /home/outcastgeek/workspace/oasys_corp/src/com/outcastgeek/util/Jobs.clj" "(ccw.debug.serverrepl/with-exception-serialization (clojure.core/binding [clojure.core/*compile-path* \\"classes\\"] (clojure.core/compile 'com.outcastgeek.util.Jobs)))" "(fetch sessionName\\n               \:where {\:_date {\:$lt (now)}}\\n               \:limit 40)" ";; Loading file /home/outcastgeek/workspace/oasys_corp/src/com/outcastgeek/util/Jobs.clj" "(now)" "(fetch sessionName\\n               \:where {\:_date {\:$lt (now)}}\\n               \:limit 40)" "(use 'somnium.congomongo)" "(fetch sessionName\\n               \:where {\:_date {\:$lt (now)}}\\n               \:limit 40)" "(use 'com.outcastgeek.config.AppConfig)" "(set-connection\! mongo-connection)" "(use 'com.outcastgeek.util.Jobs)" ";; Loading file /home/outcastgeek/workspace/oasys_corp/src/com/outcastgeek/util/Jobs.clj" ";; Switching to com.outcastgeek.util.Jobs namespace" "(clojure.core/in-ns 'com.outcastgeek.util.Jobs)" "(def sess1 (fetch sessionsCollection\\n                        \:limit 44))" "(pprint sess1)" "(defn expired? [date]\\n                   (< sessionDuration\\n                      (- (.getTime (Date.)) (.getTime date))))" "(defn destroSess [sess]\\n                                 (let [sessionId (sess \:_id)]\\n                                   (debug \\"<<<< Destroying expired user session with Id\: \\" sessionId \\" >>>>\\")\\n                                   (destroy\! sessionsCollection\\n                                             {\:_id sessionId}))\\n                                 )" "(def expSess1 (into () (r/filter \#(expired? (% \:session_timestamp))\\n                                                      (r/map\\n                                                        \#(select-keys % [\:session_timestamp \:_id]) sessions))))" "(def expSess1 (into () (r/filter \#(expired? (% \:session_timestamp))\\n                                                      (r/map\\n                                                        \#(select-keys % [\:session_timestamp \:_id]) sess1))))" "(pprint expSess1)" "(r/map pprint expSess1)" "(map pprint expSess1)" "(reduce pprint expSess1)" "(r/fold pprint expSess1)" "(reduce (r/fold pprint expSess1))" "(reduce pprint expSess1)" "(reduce pprint (r/filter \#(expired? (% \:session_timestamp))\\n                                                      (r/map\\n                                                        \#(select-keys % [\:session_timestamp \:_id]) sess1)))" "(reduce pprint (into () (r/filter \#(expired? (% \:session_timestamp))\\n                                                      (r/map\\n                                                        \#(select-keys % [\:session_timestamp \:_id]) sess1))))" "(r/mapcat pprint (r/filter \#(expired? (% \:session_timestamp))\\n                                                      (r/map\\n                                                        \#(select-keys % [\:session_timestamp \:_id]) sess1)))" "(r/map pprint (r/filter \#(expired? (% \:session_timestamp))\\n                                                      (r/map\\n                                                        \#(select-keys % [\:session_timestamp \:_id]) sess1)))" "(r/reduce pprint (r/filter \#(expired? (% \:session_timestamp))\\n                                                      (r/map\\n                                                        \#(select-keys % [\:session_timestamp \:_id]) sess1)))" "(reduce pprint (r/filter \#(expired? (% \:session_timestamp))\\n                                                      (r/map\\n                                                        \#(select-keys % [\:session_timestamp \:_id]) sess1)))" "(r/reduce pprint (into () (r/filter \#(expired? (% \:session_timestamp))\\n                                                      (r/map\\n                                                        \#(select-keys % [\:session_timestamp \:_id]) sess1))))" "(reduce pprint (into ()(r/filter \#(expired? (% \:session_timestamp))\\n                                                      (r/map\\n                                                        \#(select-keys % [\:session_timestamp \:_id]) sess1))))" ";; Switching to com.outcastgeek.config.AppConfig namespace" "(+ 1 1)" "mailQueue" "payrollCreator" "(use 'com.outcastgeek.config.AppConfig)" "(pp appProperties)" "(pprint appProperties)" "mongo-connection" "(pprint mongo-connection)" "(pprint (mongo-connection \:db))" "(use 'com.outcastgeek.services.web.Services)" "(defn rightNow (time/now))" "(require '[clj-time.core \:as time])" "(defn rightNow (time/now))" "time/now" "(defn rightNow\\n  (time/now))" "(def rightNow (time/now))" "(use 'com.outcastgeek.domain.Entities)" "(def employees\\n  (findExistingEmployee {\:username \\"akpepson\\"}))" "(def employee\\n     (findExistingEmployee {\:username \\"akpepson\\"}))" "(pprint employee)" "(use 'com.outcastgeek.config.AppConfig)" "(use 'clj-time.coerce)" "(def currentTimeSheet (findExistingTimesheet {\:employee_id (employee \:id)\\n                                                 \:start_date (to-sql-date (firstDayOfTheWeekOf rightNow))\\n                                                 \:end_date (to-sql-date (lastDayOfTheWeekOf rightNow))}))" "(def currentTimeSheet\\n  (findExistingTimesheet {\:employee_id (employee \:id)\\n                          \:start_date (to-sql-date (firstDayOfTheWeekOf rightNow))\\n                          \:end_date (to-sql-date (lastDayOfTheWeekOf rightNow))}))" "(employee \:id)" "(pprint employee)" "(\:id employee)" "(employee \:id)" "(get employee \:id)" "(get employee \\"id\\")" "(pprint (get employee \\"id\\"))" "(pprint (get employee \:id))" "(def employee\\n  (first (findExistingEmployee {\:username \\"akpepson\\"})))" "(pprint employee)" "(employee \:id)" "(def currentTimeSheet (findExistingTimesheet {\:employee_id (employee \:id)\\n                                                 \:start_date (to-sql-date (firstDayOfTheWeekOf rightNow))\\n                                                 \:end_date (to-sql-date (lastDayOfTheWeekOf rightNow))}))" "(pprint currentTimeSheet)" "(def currentTimeSheet (findExistingTimesheet {\:employee_id (employee \:id)\\n                                                    \:start_date (to-sql-date (firstDayOfTheWeekOf rightNow))\\n                                                    \:end_date (to-sql-date (lastDayOfTheWeekOf rightNow))}))" "(pprint currentTimeSheet)" "(use 'com.outcastgeek.domain.Entities)" "(use 'com.outcastgeek.services.web.Services)" "(use 'clj-time.coerce)" "(use '[clj-time.core \:as time])" "(use '[clj-time.core \:as t])" "(def rightNow (t/now))" "(use 'com.outcastgeek.domain.Entities)" "(def employee\\n        (first (findExistingEmployee {\:username \\"akpepson\\"})))" "(use 'com.outcastgeek.config.AppConfig)" "(def currentTimeSheet (findEmployeeCurrentTimesheet {\:employee_id (employee \:id)\\n                                                    \:start_date (to-sql-date (firstDayOfTheWeekOf rightNow))\\n                                                    \:end_date (to-sql-date (lastDayOfTheWeekOf rightNow))}))" "(pprint currentTimeSheet)" "(pprint (first currentTimeSheet))" "(def currentTimeSheet (first (findEmployeeCurrentTimesheet {\:employee_id (employee \:id)\\n                                                       \:start_date (to-sql-date (firstDayOfTheWeekOf rightNow))\\n                                                       \:end_date (to-sql-date (lastDayOfTheWeekOf rightNow))})))" "(pprint currentTimeSheet)" "(def workSegments (findWorksegment {\:employee_id (employee \:id)\\n                                       \:timesheet_id (currentTimeSheet \:id)}))" "(pprint workSegments)"]
eclipse.preferences.version=1
